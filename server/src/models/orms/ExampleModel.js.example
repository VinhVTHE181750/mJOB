import { DataTypes, Model } from '@sequelize/core';
import { Attribute, PrimaryKey, AutoIncrement, NotNull, Default } from '@sequelize/core/decorators-legacy';
import { Table } from 'mssql';


// Có thể bấm v bên cạnh số dòng để fold các comment (#region, #endregion)
// #region | Code đầy đủ của 1 model


@Table({ 
  tableName: 'example', // Mặc định model tên ABC thì Sequelize sẽ tự gọi bảng là số nhiều của ABC, nhưng có thể đặt tên bảng bằng param này
  timestamps: false, // Nếu không muốn có 3 cột createdAt, updatedAt, deletedAt thì thêm timestamps: false
  createdAt: false, // Dùng để tắt riêng lẻ từng cột createdAt, updatedAt, deletedAt
  updatedAt: false,
  deletedAt: false
}) 
export class Example extends Model {

  @Attribute(DataTypes.INTEGER) // Kiểu dữ liệu của field
  @PrimaryKey // đặt làm khóa chính
  @AutoIncrement // Tự động tăng giá trị
  id;

  @Attribute(DataTypes.STRING) // Kiểu dữ liệu của field
  @NotNull // Không cho phép null
  @Default('example') // Giá trị mặc định
  exampleText;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  @Default(() => uniqID()) // Giá trị mặc định có thể là kết quả của 1 function Javascript
  exampleJSRandomNumber;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  @Default(() => Math.floor(Math.random() * 1000)) // Giá trị mặc định có thể là kết quả của 1 function Javascript
  @PrimaryKey // trong trường hợp khóa chính là kết hợp của nhiều field
  exampleJSRandomNumber2;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  @Default(sql.fn('GETDATE')) // Giá trị mặc định có thể là kết quả của 1 function SQL

  // Kiểu data trong SQL
  @Attribute(DataTypes.NVARCHAR(255))
  
  //#region | Các kiểu dữ liệu:
  /*

  https://sequelize.org/docs/v7/models/data-types/

  Sequelize Data Type       -> SQL Server Data Type
  ------------------------- -> ---------------------
  1. String
  STRING                    -> NVARCHAR(255)
  STRING(100)               -> NVARCHAR(100)
  STRING.BINARY             -> ❌ (not supported)
  STRING(100).BINARY        -> ❌
  TEXT                      -> NVARCHAR(MAX)
  TEXT('tiny')              -> NVARCHAR(255)
  TEXT('medium')            -> NVARCHAR(1000)
  TEXT('long')              -> NVARCHAR(MAX)
  CHAR                      -> CHAR(255)
  CHAR(100)                 -> CHAR(100)
  CHAR.BINARY               -> ❌
  CHAR(100).BINARY          -> ❌
  BOOLEAN                   -> BIT
  CITEXT                    -> ❌
  TSVECTOR                  -> ❌

  2. Boolean
  BOOLEAN                   -> BIT

  3. Integer
  TINYINT                   -> TINYINT (note 2)
  TINYINT(1)	              -> ❌
  TINYINT.UNSIGNED	        -> TINYINT (note 2)
  TINYINT.ZEROFILL	        -> ❌
  SMALLINT	                -> SMALLINT
  SMALLINT(1)	              -> ❌
  SMALLINT.UNSIGNED	        -> INTEGER (note 3)
  SMALLINT.ZEROFILL	        -> ❌
  MEDIUMINT	                -> INTEGER (note 1)
  MEDIUMINT(1)	            -> ❌
  MEDIUMINT.UNSIGNED	      -> INTEGER
  MEDIUMINT.ZEROFILL	      -> ❌
  INTEGER	                  -> INTEGER
  INTEGER(1)	              -> ❌
  INTEGER.UNSIGNED	        -> BIGINT
  INTEGER.ZEROFILL	        -> ❌
  BIGINT	                  -> BIGINT
  BIGINT(1)	                -> ❌
  BIGINT.UNSIGNED	          -> ❌
  BIGINT.ZEROFILL	          -> ❌

  4. Decimal (approx)
  FLOAT                     -> REAL
  FLOAT(11, 10)	            -> ❌
  FLOAT.UNSIGNED	          -> REAL
  FLOAT.ZEROFILL	          -> ❌
  DOUBLE	                  -> DOUBLE PRECISION
  DOUBLE(11, 10)	          -> ❌
  DOUBLE.UNSIGNED	          -> DOUBLE PRECISION
  DOUBLE.ZEROFILL	          -> ❌

  5. Decimal (exact)
  DECIMAL	                  -> ❌
  DECIMAL(11, 10)	          -> DECIMAL(11,10)
  DECIMAL(p, s).UNSIGNED	  -> DECIMAL(p, s)
  DECIMAL(p, s).ZEROFILL	  -> ❌

  6. Date
  DATE	                    -> DATETIMEOFFSET
  DATE(6)	                  -> DATETIMEOFFSET(6)
  DATEONLY	                -> DATE
  TIME	                    -> TIME
  TIME(6)	                  -> TIME(6)

  default value:
  NOW	                      -> GETDATE() (this is a function, not a SQL data type!)

  7. UUID
  UUID	                    -> UNIQUEIDENTIFIER

  default value: ( !: cannot use these two functions in migrations)
  uuidV1	                  -> N/A
  uuidV4	                  -> NEWID

  8. BLOBs (chuỗi data)
  BLOB                      -> VARBINARY(MAX)
  BLOB('tiny')	            -> VARBINARY(256)
  BLOB('medium')	          -> VARBINARY(MAX)
  BLOB('long')	            -> VARBINARY(MAX)

  9. JSON
  JSON	                    -> NVARCHAR(MAX)
  JSONB	                    -> ❌

  10. Other
  GEOMETRY	                -> ❌
  GEOMETRY('POINT')	        -> ❌
  GEOMETRY('POINT', 4326)	  -> ❌
  GEOMETRY('POLYGON')	      -> ❌
  GEOMETRY('LINESTRING')	  -> ❌
  GEOGRAPHY	                -> ❌
  HSTORE	                  -> ❌
  CIDR	                    -> ❌
  INET	                    -> ❌
  MACADDR	                  -> ❌
  MACADDR8	                -> ❌

  ##
  VIRTUAL                   -> ❌ (This data type does not create a column in DB, it is used for virtual columns in Sequelize models.)

  Note:
  1. When an int type is not available, Sequelize uses a bigger int type. ↩ ↩2 ↩3 ↩4
  2. TINYINT in SQL Server is unsigned. DataTypes.TINYINT.UNSIGNED therefore maps to TINYINT, and DataTypes.TINYINT maps to SMALLINT. ↩ ↩2
  3. When an unsigned int type is not available, Sequelize uses a bigger int type to ensure the type covers all possible unsigned integer values of the smaller int type. ↩ ↩2 ↩3 ↩4
  4. Unlike other dialects, in SQLite, REAL is a double-precision floating point number type. ↩
  5. Unlike other dialects, in Snowflake, FLOAT is a double-precision floating point number type. ↩

  */
  //#endregion


  // Tên column cũng có thể đặt nếu DB không giống với tên field của object
  @ColumnName('first_name')  

  // Tên column có thể đặt tùy ý theo field của object, ở đây t sẽ đặt là example<Kiểu dữ liệu> (kiểu dữ liệu này sẽ được dùng trong javascript)
  exampleString;


  // Đổi tên các cột default của Sequelize
  @CreatedAt
  creationDate;

  @UpdatedAt
  lastUpdateDate;

  @DeletedAt
  deletionDate;




}
//#endregion